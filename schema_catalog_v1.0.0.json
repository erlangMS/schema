{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "title": "This scheme describes the API format for ErlangMS",
  "description": "The purpose of this is to enable eschema describe a service API with the desired attributes that are compatible with ErlangMS. Moreover, the schema may be used to validate the API developed and ensure that the format is in accordance with the rules of syntax expected.",
  "properties": {
    "name": {
      "type": "string",
      "title": "The service name.",
      "description": "The service name is used to identify the appropriate service."
    },
    "comment": {
      "type": "string",
      "title": "The service comment.",
      "description": "Enter a brief description of the service offered.",
      "default": ""
    },
    "owner": {
      "type": "string",
      "title": "The owner service.",
      "description": "Tell the owner or responsible for the service.",
      "default": ""
    },
    "version": {
      "type": "string",
      "title": "Version schema.",
      "pattern": "^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$"
    },
    "service": {
      "type": "string",
      "title": "Service schema.",
      "description": "The class or module that implements the service. The format is: [module name]: [name of the input function]",
      "pattern": "^[a-zA-Z][a-zA-Z0-9_]*[:.][a-z_][a-zA-Z0-9_]*$",
      "default": ""
    },
    "url": {
      "type": "string",
      "title": "Url of service.",
      "description": "Url of service.",
      "default": "",
      "pattern": "^(/[^/]+)+$"
    },
    "type": {
      "type": "string",
      "title": "Type of service.",
      "description": "Type of service according to the HTTP verbs.",
      "pattern": "^(GET|POST|PUT|DELETE)$"
    },
    "public": {
      "type": "boolean",
      "title": "Service is public.",
      "description": "Services that are not public services do not appear in the portal.",
      "default": true
    },
    "async": {
      "type": "boolean",
      "title": "The service is asynchronous.",
      "description": "The service is asynchronous.",
      "default": false
    },
    "datasource": {
      "type": "object",
      "title": "Datasource of service if necessary.",
      "description": "Datasource of service if necessary: odbc or csvfile",
      "properties": {
        "connection": {
          "type": "string",
          "title": "Connection string of odbc datasource.",
          "description": "Connection string of odbc datasource.",
          "default": "",
          "pattern": "^(((DSN|UID|PWD)=[a-zA-Z0-9]{1,30});)+$"
        },
        "csvfile": {
          "type": "string",
          "title": "Name of csv file.",
          "description": "Name of csv file.",
          "default": "",
          "pattern": "^[a-zA-Z][a-zA-Z0-9_]*.[Cc][Ss][Cv]$"
        },
        "table_name": {
          "type": "string",
          "title": "Table_name of datasource.",
          "description": "Table_name of datasource.",
          "default": "",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_]{1,30}$"
        },
        "primary_key": {
          "type": "string",
          "title": "Primary key of datasource.",
          "description": "Primary key of datasource.",
          "default": "",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_]{1,30}$"
        }
      },
      "oneOf": [
        {
          "required": [
            "connection",
            "table_name",
            "primary_key"
          ]
        },
        {
          "required": [
            "csvfile",
            "table_name",
            "primary_key"
          ]
        }
      ]
    },
    "lang": {
      "type": "string",
      "title": "Lang service implementation.",
      "description": "What will be the implementation language service.",
      "default": "",
      "pattern": "^(erlang|java|net)$"
    },
    "debug": {
      "type": "boolean",
      "title": "Debug service flag.",
      "description": "Enables debug mode for service.",
      "default": false
    },
    "authentication": {
      "type": "string",
      "title": "Authentication method.",
      "description": "Authentication method used if necessary.",
      "default": "",
      "pattern": "^(|basic|oauth)$"
    },
    "host_search": {
      "type": "array",
      "title": "List of hosts which are published services.",
      "description": "List of hosts which are published services.",
      "default": []
    },
    "node_search": {
      "type": "array",
      "title": "List of nodes which are published services.",
      "description": "List of nodes which are published services.",
      "default": []
    },
    "querystring": {
      "type": "object",
      "title": "Querystring of service.",
      "description": "Querystring of service.",
      "properties": {
        "filter": {
          "type": "string",
          "title": "Filter query.",
          "description": "Enter the json filter to query the objects.",
          "default": "",
          "format": "json"
        },
        "fields": {
          "type": "string",
          "title": "Fields of querystring.",
          "description": "Fields that will be returned instead of the entire object.",
          "default": "",
          "pattern": "^([a-zA-Z][a-zA-Z0-9_]{1,29})((, *)|(,?$))"
        },
        "limit_ini": {
          "type": "integer",
          "title": "Initial pager to query data.",
          "description": "Initial pager to query data.",
          "minimum": 1,
          "maximum": 9999,
          "required": [
            "minimum",
            "maximum"
          ]
        },
        "limit_offset": {
          "type": "integer",
          "title": "Pager offset to query data.",
          "description": "Pager offset to query data.",
          "minimum": 1,
          "maximum": 9999,
          "required": [
            "minimum",
            "maximum"
          ]
        },
        "sort": {
          "type": "string",
          "title": "Sort objects by their fields.",
          "description": "You can sort the objects by their fields.",
          "pattern": "^([a-zA-Z][a-zA-Z0-9_]{1,29}) (asc|desc)((, *)|(,?$))"
        }
      },
      "required": []
    }
  },
  "oneOf": [
    {
      "required": [
        "name",
        "service",
        "url",
        "type",
        "lang"
      ]
    }
  ]
}
